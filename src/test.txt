Golf:
 - test.golfTest
	- GolfHomeCellTest
		test_inital_HomeC -> Test the Homecell pile in Golf initially holds 0 cards [4 points]
		golf_addCard_test -> Test Golf homecell pile correctly determines if adding a card is legal or illegal
		golf_remove_test  -> Golf homecell pile correctly returns if removing top card is legal or illegal (e.g., always false) [4 points]
		golf_addCardIncreaseNumber -> Adding card to Golf homecell pile increases its number of cards and results in that card being the homecell pile's new top card [4 points]
	
	- GolfTableauTest
		Golf_InitialHoldTest -> Test the Tableau piles in Golf initially hold 5 cards [4 points]
		Golf_AddCardTest     -> Test the Golf tableau pile correctly determines if adding a specific card is legal or illegal (e.g., the method should always return false) [4 points]
		Golf_RemoveCardTest  -> Golf tableau pile correctly returns if removing top card is legal or illegal (e.g., if the tableau pile is NOT empty) [4 points]
		Golf_RemoveCardDecreaseTest -> Removing card from Golf tableau pile decreases its number of cards and results in following card being the new top card [4 points]
	
	- GolfStockTest
		Golf_Test_Inital -> Test the Golf stock initially holds 17 cards [2 points];
		Golf_Test_addCard -> Golf stock pile correctly returns if adding a specific card is legal or illegal (e.g., the method should always return false) [2 points]
		Golf_Test_RemoveCard -> Golf stock pile correctly returns if removing top card is legal or illegal (e.g., if the stock pile is NOT empty) [2 points]
		Golf_Test_RemoveCard_Size -> Removing card from Golf's stock pile decreases its number of cards and results in following card being the new top card [2 points]

LittleSpider:
 - test.littleSpiderTests
 	- HomecellsTests 
 		testInitialSetup -> Tests if a Homecell is correctly set-up with one card [4 points]
 		testLegalToAdd -> Tests that a card is able to be added to a Homecell [4 points]
 		testRemoveCard -> Tests that the first card always stays and that a legal card can be removed. [4 points]
 		testAddCard -> Tests that homecell increases by 1 and that the newly added card is the top one now [4 points]
		testHomecellRemove -> Tests that removing a card decreases the number of cards and that the following card is the new top card [4 points]
		
 	- LittleSpiderTest
 		No tests made yet for LittleSpider
 	
 	- TableausTests
 		testInitialStart() -> test the starting size of the tablaeus[4 points]
 		testCheckIfLegal() -> checks if it correctly determines if adding a specific card is legal or illegal[4 points]
		checkReturn() -> see if the Tableaus returns correctly if legal or illegal [4 points]
		testRemoveCard() -> removing card from Little Spider's tableau pile decreases its number of cards and results in following card being the new top card[4 points]
		testAddCard() -> check if adding a card to Little Spider's tableau pile increases its number of cards and results in that card being the tableau pile's new top card[4 points]
		
Forty Thieves:
	-thieveGameTests
		-Tableau pile tests: [18 points]
			-Tableau piles in Forty Thieves initially hold 3 cards <- testTableauInit()
			-Forty Thieves tableau pile method correctly determines if adding a specific card is legal or illegal. [4 points] <- testTableauAddandRemove()
			-Forty Thieves tableau pile method correctly determines if removing a specific card is legal or illegal. [4 points] <- testTableauAddandRemove()
			-Adding a card to Forty Thieves tableau pile increases its number of cards and results in that card being the tableau pile's new top card [4 points] <- testTableauAddLogic()
			-Removing a card from Forty Thieves tableau pile decreases its number of cards and results in following card being the new top card [4 points] <- testTableauRemoveLogic()
		
		-Homecell pile tests [8 points]
			-Forty Thieves homecell piles initially hold 1 card [2 points] <- testHomecellInit()
			-Forty Thieves homecell pile correctly determines if adding a specific card is legal or illegal [2 points] <-testHomeCellAdd()
			-Forty Thieves homecell pile correctly returns if removing top card is legal or illegal (e.g., always illegal) [2 points] <- testHomeCellRemove()
			-Adding a card to Forty Thieves homecell pile increases its number of cards and results in that card being the homecell pile's new top card [2 points] <- testHomeCellAddLogic()
		
		Stock pile tests: [5 points]
			-Forty Thieves stock pile initially holds 57 cards [1 points] <- testStockInit()
			-Forty Thieves stock pile correctly returns if adding a specific card is legal or illegal (e.g., always illegal) [1 points] <- testAddStock()
			-Forty Thieves stock pile correctly returns if removing a specific card is legal or illegal (e.g., legal if the stock pile is not empty) [1 points] <- testRemoveStockLegality()
			-Dealing cards from Forty Thieves stock pile removes the top card from the pile, results in the next card being the new top card in the stock pile, and makes the removed card the new top card on the waste pile [1 points] <- testHomeCellAddLogic()
			
		Waste pile tests: [4 points]
			-Forty Thieves waste pile initially holds 0 cards [1 points] <- testWasteEmptyInit()
			-Forty Thieves waste pile correctly returns if adding a specific card is legal or illegal (e.g., always illegal since we use another approach for this) [1 points] <- testPutWasteFromOther()
			-Forty Thieves waste pile correctly returns if removing the top card is legal or illegal (e.g., always legal) [1 points] <- testRemoveWasteCard()
			-Removing a card from Forty Thieves waste pile decreases its number of cards and results in the following card being the new top card [1 points] <- testWasteRemove()